* Builtin packages
** config functions
**** open
#+BEGIN_SRC emacs-lisp
  (defun config-open()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c o") 'config-open)
#+END_SRC
**** load
#+BEGIN_SRC emacs-lisp
  (defun config-load()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c l") 'config-load)
#+END_SRC
** highlight matching paranthesis
#+BEGIN_SRC emacs-lisp
 (show-paren-mode t)
#+END_SRC

** set indent type and size
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 4
			   tab-width 4
			   indent-tabs-mode nil)
#+END_SRC

** set C default style
#+BEGIN_SRC emacs-lisp
 (setq c-default-style "k&r")
#+END_SRC

** use 'y-or-n' prompt
#+BEGIN_SRC emacs-lisp
 (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** don't make backup files, don't show splash screen
 ;; show column number
#+BEGIN_SRC emacs-lisp
 (setq make-backup-files nil
       inhibit-splash-screen t)
#+END_SRC

** activate ido and ido-everywhere
#+BEGIN_SRC emacs-lisp
  ;; (setq ido-show-dot-for-dired t)
  (setq ido-everywhere t)
  (ido-mode t)
#+END_SRC

** undo/redo windows changes with C-c arrow
#+BEGIN_SRC emacs-lisp
 (winner-mode 1)
#+END_SRC

** change windows with shift-arrow
#+BEGIN_SRC emacs-lisp
 (windmove-default-keybindings)
#+END_SRC

** add custom ido-goto-symbol
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp")
(require 'ido-goto-symbol)
(global-set-key (kbd "C-c i") 'ido-goto-symbol)
#+END_SRC

** disable tool-bar
#+BEGIN_SRC emacs-lisp
 (tool-bar-mode -1)
 (menu-bar-mode -1)
 (scroll-bar-mode -1)
#+END_SRC
** empty scratch buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC
** bind ibuffer to C-x C-b
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** revert buffer
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c C-r") 'revert-buffer)
#+END_SRC
** rgrep
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c g") 'rgrep)
#+END_SRC
** disable the bell
#+BEGIN_SRC emacs-lisp
  (setq visible-bell 1)
#+END_SRC
** highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC
** add new line at the end of file
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
** Delete trailing white spaces on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** electric pair(add matching delimiter; i.e. open a '(' and this will open a matching ')')
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC
** icomplete
#+BEGIN_SRC emacs-lisp
  ;(icomplete-mode 1)
#+END_SRC
** gdb
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t gdb-show-main t)
#+END_SRC
** line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC

* MELPA packages
** Add MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

** Install and configure use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; ensure = make sure is installed
(setq-default use-package-always-ensure t)
#+END_SRC

** gnu-elpa-keyring-update
#+BEGIN_SRC emacs-lisp
  (use-package gnu-elpa-keyring-update)
#+END_SRC

** auto-complete
#+BEGIN_SRC emacs-lisp
  ;(use-package auto-complete
  ;      :init
  ;      (ac-config-default)
  ;      (global-auto-complete-mode t))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'c-mode-hook 'flycheck-mode)
    (add-hook 'c++-mode-hook 'flycheck-mode)
    (add-hook 'web-mode-hook 'flycheck-mode)
    (add-hook 'json-mode-hook 'flycheck-mode))
  (use-package flycheck-clang-tidy
    :after flycheck
    :hook
    (flycheck-mode . flycheck-clang-tidy-setup))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  ("C-x g" . magit-status))
#+END_SRC

** org-bullets
#+BEGIN_SRC emacs-lisp
;(use-package org-bullets
;  :init
;  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** ido
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :init
  (ido-vertical-mode 1)
  (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right))
#+END_SRC

** additional modes
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode)
  (use-package cmake-mode)
  (use-package markdown-mode)
  (use-package json-mode)
  (use-package protobuf-mode)
  (use-package yaml-mode)
  (use-package svelte-mode)
  (use-package docker-compose-mode)
#+END_SRC

** elpy
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;    :init
  ;;    (elpy-enable))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** auto-package-update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :init
    (auto-package-update-maybe))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
  (use-package ag)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  ;; (use-package projectile
  ;;   :config
  ;;   (projectile-mode +1)
  ;;   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  ;;   (setq projectile-indexing-method 'native))
#+END_SRC
** enable paradox
#+BEGIN_SRC emacs-lisp
;  (use-package paradox
;    :config
;    (paradox-enable))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
  ;(use-package avy
  ;  :bind (("C-c SPC" . avy-goto-char-2)
  ;         ("M-g f" . avy-goto-line)
  ;         ("M-g w" . avy-goto-word-1)))
#+END_SRC
** ibuffer extra packages
#+BEGIN_SRC emacs-lisp
  ;; (use-package ibuffer-vc)
  ;; (use-package ibuffer-git)
#+END_SRC
** whole line or region -> gives ERROR!!!
#+BEGIN_SRC emacs-lisp
  ;; (use-package whole-line-or-region
  ;;   :config
  ;;   (transient-mark-mode t)
  ;;   (whole-line-or-region-global-mode t))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0)
    )
#+END_SRC
** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (dumb-jump-mode)
    (setq dumb-jump-aggressive nil))
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode)
#+END_SRC
** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :init
    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (replace-regexp-in-string
                              "[ \t\n]*$"
                              ""
                              (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq eshell-path-env path-from-shell) ; for eshell users
        (setq exec-path (split-string path-from-shell path-separator))))

    (when window-system (set-exec-path-from-shell-PATH))

    (setenv "GOPATH" "/home/aburdulescu/go")

    (defun my-go-mode-hook ()
      (setq gofmt-command "goimports")
      (add-hook 'before-save-hook 'gofmt-before-save)
      (local-set-key (kbd "M-.") 'godef-jump)
      (local-set-key (kbd "M-*") 'pop-tag-mark)
      (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
               "go build -v && go test -v && go vet"))
      (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
      )

    (add-hook 'go-mode-hook 'my-go-mode-hook))

  (use-package go-autocomplete)
  (use-package go-guru
    :init
    (go-guru-hl-identifier-mode)
    )
#+END_SRC
** clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format)
#+END_SRC
** rtags
#+BEGIN_SRC emacs-lisp
  ;; (use-package rtags
  ;;   :init
  ;;   (defun my-rtags-hook ()
  ;;     (local-set-key (kbd "C-c r j") 'rtags-find-symbol-at-point)
  ;;     (local-set-key (kbd "C-c r r") 'rtags-find-references-at-point)
  ;;     (local-set-key (kbd "C-c r l b") 'rtags-location-stack-back)
  ;;     (local-set-key (kbd "C-c r l f") 'rtags-location-stack-forward)
  ;;     (local-set-key (kbd "C-c r l r") 'rtags-location-stack-reset)
  ;;     (local-set-key (kbd "C-c r l v") 'rtags-location-stack-visualize)
  ;;     )

  ;;   (add-hook 'c++-mode-hook 'my-rtags-hook)
  ;;   (add-hook 'c-mode-hook 'my-rtags-hook)
  ;;   (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)
  ;;   (add-hook 'c-mode-hook 'rtags-start-process-unless-running))
#+END_SRC
** dracula-theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c f")
    :config
    (lsp-enable-which-key-integration t)
    (add-hook 'c-mode-hook#'lsp)
    (add-hook 'c++-mode-hook#'lsp)
    (setq lsp-clients-clangd-args '("-j=1" "--background-index" "--log=verbose" "--clang-tidy" "--header-insertion=never" "--fallback-style=google" "--suggest-missing-includes" "--pch-storage=memory"))
    )

  (use-package lsp-ui
    :init
    (add-hook 'c++-mode-hook 'lsp-ui-mode)
    )

  ;; (use-package lsp-treemacs
  ;;   :config
  ;;   (global-set-key (kbd "C-c i") 'lsp-treemacs-symbols))
#+END_SRC
** htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
** plantuml
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode)

  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

  (setq org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))

  (setq plantuml-default-exec-mode 'executable)
#+END_SRC
** fzf
#+BEGIN_SRC emacs-lisp
  (use-package fzf)
#+END_SRC
